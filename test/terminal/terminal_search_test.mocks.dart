// Mocks generated by Mockito 5.0.15 from annotations
// in xterm/test/terminal/terminal_search_test.dart.
// Do not manually edit this file.

import 'package:mockito/mockito.dart' as _i1;
import 'package:xterm/buffer/buffer.dart' as _i2;
import 'package:xterm/buffer/line/line.dart' as _i5;
import 'package:xterm/terminal/charset.dart' as _i3;
import 'package:xterm/terminal/cursor.dart' as _i9;
import 'package:xterm/terminal/terminal_search_interaction.dart' as _i7;
import 'package:xterm/util/circular_list.dart' as _i4;
import 'package:xterm/util/scroll_range.dart' as _i6;

import 'terminal_search_test.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBuffer_0 extends _i1.Fake implements _i2.Buffer {}

class _FakeCharset_1 extends _i1.Fake implements _i3.Charset {}

class _FakeCircularList_2<T> extends _i1.Fake implements _i4.CircularList<T> {}

class _FakeBufferLine_3 extends _i1.Fake implements _i5.BufferLine {}

class _FakeScrollRange_4 extends _i1.Fake implements _i6.ScrollRange {}

class _FakeBufferLineData_5 extends _i1.Fake implements _i5.BufferLineData {}

/// A class which mocks [TerminalSearchInteraction].
///
/// See the documentation for Mockito's code generation for more information.
class MockTerminalSearchInteraction extends _i1.Mock
    implements _i7.TerminalSearchInteraction {
  MockTerminalSearchInteraction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Buffer get buffer => (super.noSuchMethod(Invocation.getter(#buffer),
      returnValue: _FakeBuffer_0()) as _i2.Buffer);
  @override
  int get terminalWidth =>
      (super.noSuchMethod(Invocation.getter(#terminalWidth), returnValue: 0)
          as int);
  @override
  bool isUsingAltBuffer() =>
      (super.noSuchMethod(Invocation.method(#isUsingAltBuffer, []),
          returnValue: false) as bool);
}

/// A class which mocks [Buffer].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuffer extends _i1.Mock implements _i2.Buffer {
  MockBuffer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAltBuffer =>
      (super.noSuchMethod(Invocation.getter(#isAltBuffer), returnValue: false)
          as bool);
  @override
  _i3.Charset get charset => (super.noSuchMethod(Invocation.getter(#charset),
      returnValue: _FakeCharset_1()) as _i3.Charset);
  @override
  _i4.CircularList<_i5.BufferLine> get lines =>
      (super.noSuchMethod(Invocation.getter(#lines),
              returnValue: _FakeCircularList_2<_i5.BufferLine>())
          as _i4.CircularList<_i5.BufferLine>);
  @override
  set lines(_i4.CircularList<_i5.BufferLine>? _lines) =>
      super.noSuchMethod(Invocation.setter(#lines, _lines),
          returnValueForMissingStub: null);
  @override
  int get viewHeight =>
      (super.noSuchMethod(Invocation.getter(#viewHeight), returnValue: 0)
          as int);
  @override
  int get viewWidth =>
      (super.noSuchMethod(Invocation.getter(#viewWidth), returnValue: 0)
          as int);
  @override
  int get scrollOffsetFromBottom =>
      (super.noSuchMethod(Invocation.getter(#scrollOffsetFromBottom),
          returnValue: 0) as int);
  @override
  int get scrollOffsetFromTop => (super
          .noSuchMethod(Invocation.getter(#scrollOffsetFromTop), returnValue: 0)
      as int);
  @override
  bool get isUserScrolling => (super
          .noSuchMethod(Invocation.getter(#isUserScrolling), returnValue: false)
      as bool);
  @override
  int get cursorX =>
      (super.noSuchMethod(Invocation.getter(#cursorX), returnValue: 0) as int);
  @override
  int get cursorY =>
      (super.noSuchMethod(Invocation.getter(#cursorY), returnValue: 0) as int);
  @override
  int get marginTop =>
      (super.noSuchMethod(Invocation.getter(#marginTop), returnValue: 0)
          as int);
  @override
  int get marginBottom =>
      (super.noSuchMethod(Invocation.getter(#marginBottom), returnValue: 0)
          as int);
  @override
  _i5.BufferLine get currentLine =>
      (super.noSuchMethod(Invocation.getter(#currentLine),
          returnValue: _FakeBufferLine_3()) as _i5.BufferLine);
  @override
  int get height =>
      (super.noSuchMethod(Invocation.getter(#height), returnValue: 0) as int);
  @override
  bool get hasScrollableRegion =>
      (super.noSuchMethod(Invocation.getter(#hasScrollableRegion),
          returnValue: false) as bool);
  @override
  bool get isInScrollableRegion =>
      (super.noSuchMethod(Invocation.getter(#isInScrollableRegion),
          returnValue: false) as bool);
  @override
  void write(String? text) =>
      super.noSuchMethod(Invocation.method(#write, [text]),
          returnValueForMissingStub: null);
  @override
  void writeChar(int? codePoint) =>
      super.noSuchMethod(Invocation.method(#writeChar, [codePoint]),
          returnValueForMissingStub: null);
  @override
  _i5.BufferLine getViewLine(int? index) =>
      (super.noSuchMethod(Invocation.method(#getViewLine, [index]),
          returnValue: _FakeBufferLine_3()) as _i5.BufferLine);
  @override
  int convertViewLineToRawLine(int? viewLine) => (super.noSuchMethod(
      Invocation.method(#convertViewLineToRawLine, [viewLine]),
      returnValue: 0) as int);
  @override
  int convertRawLineToViewLine(int? rawLine) => (super.noSuchMethod(
      Invocation.method(#convertRawLineToViewLine, [rawLine]),
      returnValue: 0) as int);
  @override
  void newLine() => super.noSuchMethod(Invocation.method(#newLine, []),
      returnValueForMissingStub: null);
  @override
  void carriageReturn() =>
      super.noSuchMethod(Invocation.method(#carriageReturn, []),
          returnValueForMissingStub: null);
  @override
  void backspace() => super.noSuchMethod(Invocation.method(#backspace, []),
      returnValueForMissingStub: null);
  @override
  List<_i5.BufferLine> getVisibleLines() =>
      (super.noSuchMethod(Invocation.method(#getVisibleLines, []),
          returnValue: <_i5.BufferLine>[]) as List<_i5.BufferLine>);
  @override
  void eraseDisplayFromCursor() =>
      super.noSuchMethod(Invocation.method(#eraseDisplayFromCursor, []),
          returnValueForMissingStub: null);
  @override
  void eraseDisplayToCursor() =>
      super.noSuchMethod(Invocation.method(#eraseDisplayToCursor, []),
          returnValueForMissingStub: null);
  @override
  void eraseDisplay() =>
      super.noSuchMethod(Invocation.method(#eraseDisplay, []),
          returnValueForMissingStub: null);
  @override
  void eraseLineFromCursor() =>
      super.noSuchMethod(Invocation.method(#eraseLineFromCursor, []),
          returnValueForMissingStub: null);
  @override
  void eraseLineToCursor() =>
      super.noSuchMethod(Invocation.method(#eraseLineToCursor, []),
          returnValueForMissingStub: null);
  @override
  void eraseLine() => super.noSuchMethod(Invocation.method(#eraseLine, []),
      returnValueForMissingStub: null);
  @override
  void eraseCharacters(int? count) =>
      super.noSuchMethod(Invocation.method(#eraseCharacters, [count]),
          returnValueForMissingStub: null);
  @override
  _i6.ScrollRange getAreaScrollRange() =>
      (super.noSuchMethod(Invocation.method(#getAreaScrollRange, []),
          returnValue: _FakeScrollRange_4()) as _i6.ScrollRange);
  @override
  void areaScrollDown(int? lines) =>
      super.noSuchMethod(Invocation.method(#areaScrollDown, [lines]),
          returnValueForMissingStub: null);
  @override
  void areaScrollUp(int? lines) =>
      super.noSuchMethod(Invocation.method(#areaScrollUp, [lines]),
          returnValueForMissingStub: null);
  @override
  void index() => super.noSuchMethod(Invocation.method(#index, []),
      returnValueForMissingStub: null);
  @override
  void reverseIndex() =>
      super.noSuchMethod(Invocation.method(#reverseIndex, []),
          returnValueForMissingStub: null);
  @override
  void cursorGoForward() =>
      super.noSuchMethod(Invocation.method(#cursorGoForward, []),
          returnValueForMissingStub: null);
  @override
  void setCursorX(int? cursorX) =>
      super.noSuchMethod(Invocation.method(#setCursorX, [cursorX]),
          returnValueForMissingStub: null);
  @override
  void setCursorY(int? cursorY) =>
      super.noSuchMethod(Invocation.method(#setCursorY, [cursorY]),
          returnValueForMissingStub: null);
  @override
  void moveCursorX(int? offset) =>
      super.noSuchMethod(Invocation.method(#moveCursorX, [offset]),
          returnValueForMissingStub: null);
  @override
  void moveCursorY(int? offset) =>
      super.noSuchMethod(Invocation.method(#moveCursorY, [offset]),
          returnValueForMissingStub: null);
  @override
  void setPosition(int? cursorX, int? cursorY) =>
      super.noSuchMethod(Invocation.method(#setPosition, [cursorX, cursorY]),
          returnValueForMissingStub: null);
  @override
  void movePosition(int? offsetX, int? offsetY) =>
      super.noSuchMethod(Invocation.method(#movePosition, [offsetX, offsetY]),
          returnValueForMissingStub: null);
  @override
  void setScrollOffsetFromBottom(int? offsetFromBottom) => super.noSuchMethod(
      Invocation.method(#setScrollOffsetFromBottom, [offsetFromBottom]),
      returnValueForMissingStub: null);
  @override
  void setScrollOffsetFromTop(int? offsetFromTop) => super.noSuchMethod(
      Invocation.method(#setScrollOffsetFromTop, [offsetFromTop]),
      returnValueForMissingStub: null);
  @override
  void screenScrollUp(int? lines) =>
      super.noSuchMethod(Invocation.method(#screenScrollUp, [lines]),
          returnValueForMissingStub: null);
  @override
  void screenScrollDown(int? lines) =>
      super.noSuchMethod(Invocation.method(#screenScrollDown, [lines]),
          returnValueForMissingStub: null);
  @override
  void saveCursor() => super.noSuchMethod(Invocation.method(#saveCursor, []),
      returnValueForMissingStub: null);
  @override
  void restoreCursor() =>
      super.noSuchMethod(Invocation.method(#restoreCursor, []),
          returnValueForMissingStub: null);
  @override
  void setVerticalMargins(int? top, int? bottom) =>
      super.noSuchMethod(Invocation.method(#setVerticalMargins, [top, bottom]),
          returnValueForMissingStub: null);
  @override
  void resetVerticalMargins() =>
      super.noSuchMethod(Invocation.method(#resetVerticalMargins, []),
          returnValueForMissingStub: null);
  @override
  void deleteChars(int? count) =>
      super.noSuchMethod(Invocation.method(#deleteChars, [count]),
          returnValueForMissingStub: null);
  @override
  void clearScrollback() =>
      super.noSuchMethod(Invocation.method(#clearScrollback, []),
          returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  void insertBlankCharacters(int? count) =>
      super.noSuchMethod(Invocation.method(#insertBlankCharacters, [count]),
          returnValueForMissingStub: null);
  @override
  void insertLines(int? count) =>
      super.noSuchMethod(Invocation.method(#insertLines, [count]),
          returnValueForMissingStub: null);
  @override
  void insertLine() => super.noSuchMethod(Invocation.method(#insertLine, []),
      returnValueForMissingStub: null);
  @override
  void deleteLines(int? count) =>
      super.noSuchMethod(Invocation.method(#deleteLines, [count]),
          returnValueForMissingStub: null);
  @override
  void deleteLine() => super.noSuchMethod(Invocation.method(#deleteLine, []),
      returnValueForMissingStub: null);
  @override
  void resize(int? oldWidth, int? oldHeight, int? newWidth, int? newHeight) =>
      super.noSuchMethod(
          Invocation.method(
              #resize, [oldWidth, oldHeight, newWidth, newHeight]),
          returnValueForMissingStub: null);
  @override
  dynamic adjustSavedCursor(int? dx, int? dy) =>
      super.noSuchMethod(Invocation.method(#adjustSavedCursor, [dx, dy]));
}

/// A class which mocks [TerminalSearchTestCircularList].
///
/// See the documentation for Mockito's code generation for more information.
class MockTerminalSearchTestCircularList extends _i1.Mock
    implements _i8.TerminalSearchTestCircularList {
  MockTerminalSearchTestCircularList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get maxLength =>
      (super.noSuchMethod(Invocation.getter(#maxLength), returnValue: 0)
          as int);
  @override
  set maxLength(int? value) =>
      super.noSuchMethod(Invocation.setter(#maxLength, value),
          returnValueForMissingStub: null);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  set length(int? value) =>
      super.noSuchMethod(Invocation.setter(#length, value),
          returnValueForMissingStub: null);
  @override
  bool get isFull =>
      (super.noSuchMethod(Invocation.getter(#isFull), returnValue: false)
          as bool);
  @override
  void forEach(void Function(_i5.BufferLine)? callback) =>
      super.noSuchMethod(Invocation.method(#forEach, [callback]),
          returnValueForMissingStub: null);
  @override
  _i5.BufferLine operator [](int? index) =>
      (super.noSuchMethod(Invocation.method(#[], [index]),
          returnValue: _FakeBufferLine_3()) as _i5.BufferLine);
  @override
  void operator []=(int? index, _i5.BufferLine? value) =>
      super.noSuchMethod(Invocation.method(#[]=, [index, value]),
          returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  void pushAll(Iterable<_i5.BufferLine>? items) =>
      super.noSuchMethod(Invocation.method(#pushAll, [items]),
          returnValueForMissingStub: null);
  @override
  void push(_i5.BufferLine? value) =>
      super.noSuchMethod(Invocation.method(#push, [value]),
          returnValueForMissingStub: null);
  @override
  _i5.BufferLine pop() => (super.noSuchMethod(Invocation.method(#pop, []),
      returnValue: _FakeBufferLine_3()) as _i5.BufferLine);
  @override
  void remove(int? index, [int? count = 1]) =>
      super.noSuchMethod(Invocation.method(#remove, [index, count]),
          returnValueForMissingStub: null);
  @override
  void insert(int? index, _i5.BufferLine? item) =>
      super.noSuchMethod(Invocation.method(#insert, [index, item]),
          returnValueForMissingStub: null);
  @override
  void insertAll(int? index, List<_i5.BufferLine>? items) =>
      super.noSuchMethod(Invocation.method(#insertAll, [index, items]),
          returnValueForMissingStub: null);
  @override
  void trimStart(int? count) =>
      super.noSuchMethod(Invocation.method(#trimStart, [count]),
          returnValueForMissingStub: null);
  @override
  void shiftElements(int? start, int? count, int? offset) => super.noSuchMethod(
      Invocation.method(#shiftElements, [start, count, offset]),
      returnValueForMissingStub: null);
  @override
  void replaceWith(List<_i5.BufferLine>? replacement) =>
      super.noSuchMethod(Invocation.method(#replaceWith, [replacement]),
          returnValueForMissingStub: null);
  @override
  List<_i5.BufferLine> toList() =>
      (super.noSuchMethod(Invocation.method(#toList, []),
          returnValue: <_i5.BufferLine>[]) as List<_i5.BufferLine>);
}

/// A class which mocks [BufferLine].
///
/// See the documentation for Mockito's code generation for more information.
class MockBufferLine extends _i1.Mock implements _i5.BufferLine {
  MockBufferLine() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.BufferLineData get data => (super.noSuchMethod(Invocation.getter(#data),
      returnValue: _FakeBufferLineData_5()) as _i5.BufferLineData);
  @override
  bool get isWrapped =>
      (super.noSuchMethod(Invocation.getter(#isWrapped), returnValue: false)
          as bool);
  @override
  set isWrapped(bool? value) =>
      super.noSuchMethod(Invocation.setter(#isWrapped, value),
          returnValueForMissingStub: null);
  @override
  bool get hasCachedSearchString =>
      (super.noSuchMethod(Invocation.getter(#hasCachedSearchString),
          returnValue: false) as bool);
  @override
  void markTagAsNonDirty(String? tag) =>
      super.noSuchMethod(Invocation.method(#markTagAsNonDirty, [tag]),
          returnValueForMissingStub: null);
  @override
  bool isTagDirty(String? tag) =>
      (super.noSuchMethod(Invocation.method(#isTagDirty, [tag]),
          returnValue: false) as bool);
  @override
  void ensure(int? length) =>
      super.noSuchMethod(Invocation.method(#ensure, [length]),
          returnValueForMissingStub: null);
  @override
  void insert(int? index) =>
      super.noSuchMethod(Invocation.method(#insert, [index]),
          returnValueForMissingStub: null);
  @override
  void insertN(int? index, int? count) =>
      super.noSuchMethod(Invocation.method(#insertN, [index, count]),
          returnValueForMissingStub: null);
  @override
  void removeN(int? index, int? count) =>
      super.noSuchMethod(Invocation.method(#removeN, [index, count]),
          returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  void erase(_i9.Cursor? cursor, int? start, int? end,
          [bool? resetIsWrapped = false]) =>
      super.noSuchMethod(
          Invocation.method(#erase, [cursor, start, end, resetIsWrapped]),
          returnValueForMissingStub: null);
  @override
  void cellClear(int? index) =>
      super.noSuchMethod(Invocation.method(#cellClear, [index]),
          returnValueForMissingStub: null);
  @override
  void cellInitialize(int? index,
          {int? content, int? width, _i9.Cursor? cursor}) =>
      super.noSuchMethod(
          Invocation.method(#cellInitialize, [index],
              {#content: content, #width: width, #cursor: cursor}),
          returnValueForMissingStub: null);
  @override
  bool cellHasContent(int? index) =>
      (super.noSuchMethod(Invocation.method(#cellHasContent, [index]),
          returnValue: false) as bool);
  @override
  int cellGetContent(int? index) =>
      (super.noSuchMethod(Invocation.method(#cellGetContent, [index]),
          returnValue: 0) as int);
  @override
  void cellSetContent(int? index, int? content) =>
      super.noSuchMethod(Invocation.method(#cellSetContent, [index, content]),
          returnValueForMissingStub: null);
  @override
  int cellGetFgColor(int? index) =>
      (super.noSuchMethod(Invocation.method(#cellGetFgColor, [index]),
          returnValue: 0) as int);
  @override
  void cellSetFgColor(int? index, int? color) =>
      super.noSuchMethod(Invocation.method(#cellSetFgColor, [index, color]),
          returnValueForMissingStub: null);
  @override
  int cellGetBgColor(int? index) =>
      (super.noSuchMethod(Invocation.method(#cellGetBgColor, [index]),
          returnValue: 0) as int);
  @override
  void cellSetBgColor(int? index, int? color) =>
      super.noSuchMethod(Invocation.method(#cellSetBgColor, [index, color]),
          returnValueForMissingStub: null);
  @override
  int cellGetFlags(int? index) =>
      (super.noSuchMethod(Invocation.method(#cellGetFlags, [index]),
          returnValue: 0) as int);
  @override
  void cellSetFlags(int? index, int? flags) =>
      super.noSuchMethod(Invocation.method(#cellSetFlags, [index, flags]),
          returnValueForMissingStub: null);
  @override
  int cellGetWidth(int? index) =>
      (super.noSuchMethod(Invocation.method(#cellGetWidth, [index]),
          returnValue: 0) as int);
  @override
  void cellSetWidth(int? index, int? width) =>
      super.noSuchMethod(Invocation.method(#cellSetWidth, [index, width]),
          returnValueForMissingStub: null);
  @override
  void cellClearFlags(int? index) =>
      super.noSuchMethod(Invocation.method(#cellClearFlags, [index]),
          returnValueForMissingStub: null);
  @override
  bool cellHasFlag(int? index, int? flag) =>
      (super.noSuchMethod(Invocation.method(#cellHasFlag, [index, flag]),
          returnValue: false) as bool);
  @override
  void cellSetFlag(int? index, int? flag) =>
      super.noSuchMethod(Invocation.method(#cellSetFlag, [index, flag]),
          returnValueForMissingStub: null);
  @override
  void cellErase(int? index, _i9.Cursor? cursor) =>
      super.noSuchMethod(Invocation.method(#cellErase, [index, cursor]),
          returnValueForMissingStub: null);
  @override
  int getTrimmedLength([int? cols]) =>
      (super.noSuchMethod(Invocation.method(#getTrimmedLength, [cols]),
          returnValue: 0) as int);
  @override
  void copyCellsFrom(_i5.BufferLine? src, int? srcCol, int? dstCol, int? len) =>
      super.noSuchMethod(
          Invocation.method(#copyCellsFrom, [src, srcCol, dstCol, len]),
          returnValueForMissingStub: null);
  @override
  void removeRange(int? start, int? end) =>
      super.noSuchMethod(Invocation.method(#removeRange, [start, end]),
          returnValueForMissingStub: null);
  @override
  void clearRange(int? start, int? end) =>
      super.noSuchMethod(Invocation.method(#clearRange, [start, end]),
          returnValueForMissingStub: null);
  @override
  String toDebugString(int? cols) =>
      (super.noSuchMethod(Invocation.method(#toDebugString, [cols]),
          returnValue: '') as String);
  @override
  String toSearchString(int? cols) =>
      (super.noSuchMethod(Invocation.method(#toSearchString, [cols]),
          returnValue: '') as String);
}
